@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField @bind-Value="Album.Name" T="string" Label="Name" Required="true" RequiredError="User name is required!" />
                <MudTextField @bind-Value="Album.Description" T="string" Label="Description" Required="false" />
                <MudTextField @bind-Value="Album.AuthorName" T="string" Label="Author name" Required="false" />
                <MudTextField @bind-Value="Album.TimeInMinutes" T="int" Label="Time in minutes" Required="false" />
                <MudTextField @bind-Value="Album.Rating" T="int" Label="Rating" Required="false" />

                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload">
                            Upload Files
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>

                <MudTable Items="@Album.Tracks" Dense="true" Hover="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Tracks</MudText>
                        <MudSpacer />
                        <MudButton Color="Color.Primary" OnClick="AddTrack">Add Track</MudButton>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Title</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Title">
                            <MudTextField @bind-Value="context.Title" Immediate="true" />
                        </MudTd>
                        <MudTd DataLabel="Description">
                            <MudTextField @bind-Value="context.Description" Immediate="true" />
                        </MudTd>
                        <MudTd>
                            <MudButton Color="Color.Error" OnClick="@(() => RemoveTrack(context))">Remove</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>

                <div class="d-flex align-center justify-space-between mt-4">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Disabled="@(!success)"
                               OnClick="AddAlbumAsync">Save Album</MudButton>
                </div>

            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private Album Album { get; set; } = new Album();
    bool success;
    string[] errors = { };
    MudForm form;

    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private async Task UploadFiles(IBrowserFile file)
    {
        // Чтение содержимого файла
        using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // Ограничьте размер потока по необходимости
        using var memoryStream = new MemoryStream();

        await stream.CopyToAsync(memoryStream);

        // Сохраните данные изображения и тип
        Album.ImageData = memoryStream.ToArray();
        Album.ImageType = file.ContentType; // Получаем MIME-тип

        // Если необходимо, можно также сохранить файл на сервере здесь
    }

    private async Task AddAlbumAsync()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/AlbumIteration/createAlbum", Album);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Album added successfully", Severity.Success);
                Album = new Album();
                await form.ResetAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error adding album: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private void AddTrack()
    {
        var tracks = Album.Tracks.ToList();
        tracks.Add(new Track { Title = "New Track", Description = "Description" });
        Album.Tracks = tracks;
    }

    private void RemoveTrack(Track track)
    {
        var tracks = Album.Tracks.ToList();
        tracks.Remove(track);
        Album.Tracks = tracks;
    }
}