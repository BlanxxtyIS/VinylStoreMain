@inject IDialogService DialogService
@inject HttpClient Http

<MudDataGrid Items="@Albums" Filterable="false" SortMode="@SortMode.None" Groupable="false">
    <Columns>
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Description" />
        <PropertyColumn Property="x => x.ImageData" />
        <PropertyColumn Property="x => x.AuthorName" />
        <PropertyColumn Property="x => x.TimeFormatted" />
        <PropertyColumn Property="x => x.Rating" />
        <MudImage Fluid="true" Src="x => x.ImageBase64" Alt="Swedish Farm House" Class="rounded-lg" />
        <PropertyColumn Property="x => x.Tracks" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                               OnClick="@((e) => DeleteUserAsync(context.Item))">Delete</MudButton>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Small"
                    OnClick="@((e) => EditServerAsync(context.Item))">Edit</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


@code {

    private IEnumerable<Album>? _albums;

    [Parameter, EditorRequired]
    public IEnumerable<Album> Albums { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _albums = Albums;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was as problem loading trails data: {ex.Message}");
        }
    }

    private Task DeleteUserAsync(Album album)
    {
        var parameters = new DialogParameters<DeleteDialog>
    {
        { x => x.ContentText, "Do you really want to delete this album? This process cannot be undone." },
        { x => x.ButtonText, "Delete" },
        { x => x.Color, Color.Error },
        { x => x.Album, album }
    };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        return DialogService.ShowAsync<DeleteDialog>("Delete", parameters, options);
    }


    private async Task EditServerAsync(Album album)
    {
        var parameters = new DialogParameters<AdminDialog> { { x => x.Album, album } };

        var dialog = await DialogService.ShowAsync<AdminDialog>("Edit Server", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
        }
    }
}
