@inject HttpClient Http
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Edit server?
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField Value="@Album.AlbumId" Label="Album Id" ReadOnly="false" />
        <MudTextField @bind-Value="@Album.Name" T="string" Label="Album name" ReadOnly="false" />
        <MudTextField @bind-Value="Album.Description" T="string" Label="Description" Required="false" />
        @* <MudTextField Value="@Album.Image" Label="Image" ReadOnly="false" /> *@
        <MudImage Fluid="true" Src="@Album.ImageBase64" Alt="Swedish Farm House" Class="rounded-lg" />
        <MudTextField @bind-value="@Album.AuthorName" T="string" Label="Author name" ReadOnly="false" />
        <MudTextField @bind-value="@Album.TimeInMinutes" T="int" Label="Time in minutes" ReadOnly="false" />
        <MudTextField @bind-value="@Album.Rating" T="int" Label="Rating" ReadOnly="false" />

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="AddAlbumAsync">Edit data</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Album Album { get; set; } = new Album();

    private void Cancel() => MudDialog.Cancel();

    private void DeleteServer()
    {
        Snackbar.Add("Data edited", Severity.Success);
        MudDialog.Close(DialogResult.Ok(Album.AlbumId));
    }

    private async Task AddAlbumAsync()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/AlbumIteration/updateAlbum/{Album.AlbumId}", Album);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Album added successfully", Severity.Success);
                Album = new Album();
                DeleteServer();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error adding album: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

}
